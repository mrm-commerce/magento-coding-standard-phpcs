<?xml version="1.0"?>
<ruleset name="MRM Commerce Magento 2 Coding Standard" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../../../squizlabs/php_codesniffer/phpcs.xsd">
    <description>MRM Commerce Magento 2 Coding Standard</description>
    <rule ref="../../../magento/magento-coding-standard/Magento2/ruleset.xml"/>
    <rule ref="../../../slevomat/coding-standard/SlevomatCodingStandard/ruleset.xml"/>
    <rule ref="../../../phpcompatibility/php-compatibility/PHPCompatibility/ruleset.xml"/>
    <rule ref="../../../squizlabs/php_codesniffer/src/Standards/PSR12/ruleset.xml"/>
    <rule ref="Security">
        <!-- Too many false positives in case of repositories - excluding until it's fixed -->
        <exclude name="Security.BadFunctions.FilesystemFunctions.WarnFilesystem"/>
    </rule>
    <rule ref="SlevomatCodingStandard">
        <!-- FQCNs should be allowed -->
        <exclude name="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly"/>
        <!-- It's okay to use global functions like strpos() or __() without making them fully qualified like \__(). -->
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions.NonFullyQualified"/>
        <!-- We want to utilize use statements for consts in order not to create hidden dependencies-->
        <exclude name="SlevomatCodingStandard.Namespaces.UseOnlyWhitelistedNamespaces.NonFullyQualified"/>
        <!-- This may be useful for a git diff, but is simply unnatural to write. -->
        <exclude name="SlevomatCodingStandard.Arrays.TrailingArrayComma.MissingTrailingComma"/>
        <!-- The empty() language construct is useful, so we should not disallow its usage -->
        <exclude name="SlevomatCodingStandard.ControlStructures.DisallowEmpty.DisallowedEmpty"/>
        <!-- When PhpStorm generates code for class constructor, properties are multi-line. -->
        <exclude name="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment.MultiLinePropertyComment"/>
        <!-- The following rule is disabled, because we have phpmd for that already-->
        <exclude name="SlevomatCodingStandard.Functions.UnusedParameter.UnusedParameter"/>
        <!-- While in case of arrays it may be useful, in case of function calls it's just unnatural -->
        <exclude name="SlevomatCodingStandard.Functions.TrailingCommaInCall.MissingTrailingComma"/>
        <!-- Extensions should be referenced using imports for FQCN or else they create hidden dependencies-->
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedExceptions.NonFullyQualifiedException"/>
        <!-- Bitches about Interface suffix in interfaces. Which is a convention used in Magento. -->
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming.SuperfluousSuffix"/>
        <!-- We don't need new lines before the class closing brace -->
        <exclude name="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces.NoEmptyLineBeforeClosingBrace"/>
        <!-- ...or after the class opening brace -->
        <exclude name="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces.NoEmptyLineAfterOpeningBrace"/>
        <!-- We're perfectly fine with type hints like string[] since that's what Magento uses in xml files too. -->
        <exclude name="SlevomatCodingStandard.TypeHints.DisallowArrayTypeHintSyntax.DisallowedArrayTypeHintSyntax"/>
        <!-- While it woudl be nice to disallow mixed, this also returns false positives on mixed[]. -->
        <exclude name="SlevomatCodingStandard.TypeHints.DisallowMixedTypeHint.DisallowedMixedTypeHint"/>
        <!-- No. Just no. -->
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireYodaComparison.RequiredYodaComparison"/>
        <!-- We always add comments to everything. Including return types. -->
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.UselessAnnotation"/>
        <!-- There are some public methods that actually do require param types in annotations. -->
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.UselessAnnotation"/>
        <!-- We have PHPMD for that. -->
        <exclude name="SlevomatCodingStandard.Classes.UnusedPrivateElements.UnusedMethod"/>
        <!-- Always a positive. In every file. -->
        <exclude name="SlevomatCodingStandard.Files.TypeNameMatchesFileName.NoMatchBetweenTypeNameAndFileName"/>
        <!-- Nothing wrong with that. Keeps use statements consistent. -->
        <exclude name="SlevomatCodingStandard.Namespaces.UseFromSameNamespace.UseFromSameNamespace"/>
        <!-- When we want to catch an exception, we want to catch an exception. Not a throwable. -->
        <exclude name="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly.ReferencedGeneralException"/>
        <!-- Single-line comment can have a multi-line syntax because that's simply convenient to generate. -->
        <exclude name="SlevomatCodingStandard.Commenting.RequireOneLineDocComment.MultiLineDocComment"/>
        <!-- Conflicts with PSR12.Classes.ClassInstantiation.MissingParentheses. -->
        <exclude name="SlevomatCodingStandard.ControlStructures.NewWithoutParentheses.UselessParentheses"/>
        <!-- The same as PSR12.Files.ImportStatement.LeadingSlash. -->
        <exclude name="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash.UseStartsWithBackslash"/>
        <!-- The same as PSR12.Properties.ConstantVisibility.NotFound. -->
        <exclude name="SlevomatCodingStandard.Classes.ClassConstantVisibility"/>
        <!-- We can usually live without this one. -->
        <exclude name="SlevomatCodingStandard.Functions.StrictCall.StrictParameterMissing"/>
        <!-- While useful in regular methods, in M2 this would throw a lot of warnings for constructors. -->
        <exclude name="SlevomatCodingStandard.Classes.ParentCallSpacing.IncorrectLinesCountBeforeControlStructure"/>
        <!-- In M2 there's a convention to end class names of exceptions with Exception. -->
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousExceptionNaming.SuperfluousSuffix"/>
        <!-- Comments after code are allowed - can be helpful in case of multi-line calls. -->
        <exclude name="SlevomatCodingStandard.Commenting.DisallowCommentAfterCode.DisallowedCommentAfterCode"/>
    </rule>
    <rule ref="PSR2">
        <!-- Conflicts with PSR12 -->
        <exclude name="PSR2.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace"/>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="2"/>
            <property name="newlinesCountAfterDeclare" value="2"/>
            <property name="spacesCountAroundEqualsSign" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <properties>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireMultiLineTernaryOperator">
        <properties>
            <property name="lineLengthLimit" value="120"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison">
        <severity>10</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit">
        <properties>
            <property name="ignoreStandaloneIfInScope" value="true"/>
            <property name="ignoreOneLineTrailingIf" value="true"/>
            <property name="ignoreTrailingIfWithOneInstruction" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Operators.DisallowIncrementAndDecrementOperators">
        <severity>0</severity>
    </rule>
    <!-- The current standard we wilfully adhere to without complain is to add comments everywhere. -->
    <rule ref="SlevomatCodingStandard.Commenting.UselessFunctionDocComment">
        <severity>0</severity>
    </rule>
    <!-- Conflicts with the Magento 2 Coding Standard. -->
    <rule ref="SlevomatCodingStandard.PHP.RequireExplicitAssertion">
        <severity>0</severity>
    </rule>
    <!-- This rule doesn't check compatibility with parent and can break your code (e.g. graphql resolvers). -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
        <severity phpcbf-only="true">0</severity>
    </rule>
    <!-- Check for duplicate spaces should ignore spaces that may possibly be there for multi-line visual alignment -->
    <rule ref="SlevomatCodingStandard.Whitespaces.DuplicateSpaces">
        <properties>
            <property name="ignoreSpacesBeforeAssignment" value="true"/>
            <property name="ignoreSpacesInAnnotation" value="true"/>
            <property name="ignoreSpacesInComment" value="true"/>
        </properties>
    </rule>
    <!-- Disallowing some useless annotations. -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array">
                <element value="@class"/>
                <element value="@package"/>
            </property>
        </properties>
    </rule>
    <!-- Disallowing some useless annotations. -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
        <properties>
            <property name="forbiddenCommentPatterns" type="array">
                <element value="#^Class\s+\S+$#i"/>
                <element value="#^\S+\sconstructor\.$#i"/>
            </property>
        </properties>
    </rule>
    <!-- Numbers less than 8 digits-long before or after the decimal point are readable enough -->
    <rule ref="SlevomatCodingStandard.Numbers.RequireNumericLiteralSeparator">
        <properties>
            <property name="minDigitsBeforeDecimalPoint" value="8"/>
            <property name="minDigitsAfterDecimalPoint" value="8"/>
        </properties>
    </rule>
    <!-- in PHPUnit tests the protected setUp() method is usually placed above actual tests -->
    <rule ref="SlevomatCodingStandard.Classes.ClassStructure.IncorrectGroupOrder">
        <exclude-pattern>*/Test/*/*Test\.php$</exclude-pattern>
    </rule>
    <!-- Creating via the "new" keyword creates hidden dependencies in the code -->
    <rule ref="SlevomatCodingStandard.PHP.ForbiddenClasses">
        <properties>
            <property name="forbiddenClasses" type="array">
                <element key="DataObject" value="Magento\Framework\DataObject"/>
            </property>
        </properties>
    </rule>
    <!-- Control structures are formatted differently in .phtml template files -->
    <rule ref="SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing">
        <exclude-pattern>*\.phtml$</exclude-pattern>
    </rule>
    <!-- Control structures are formatted differently in .phtml template files -->
    <rule ref="Squiz.ControlStructures.ControlSignature.SpaceAfterCloseParenthesis">
        <exclude-pattern>*\.phtml$</exclude-pattern>
    </rule>
</ruleset>
